***********************************************
NEW RELEASE 2
***********************************************
- implement hessian for all covariances
    - particularly: FreeForm and LowRank!!!

- We have no tests for the mean
        - add tests

- test interface between gp_base and menaKronSum (test_gp_more)
    - in particular how missing data are handled

- Missing data strategy:
    - mean_base does not handle missing data
        (it makes no sense to have a univariate model with missing data)
    - meanKronSum can handle missing data 
        - Y, F, A, Yres is the matrix representation (can have missing data)
        - y, W, yres is the vector representation without missing data
    - GP2KronSum, GP2KRonSumLR GP3KronSumLR do not support missing data and they care about matrix-representaiotn
        - TODO: GP2KronSum, GP2KronSumLR and GP3KronSumLR have to check that there are not missing data in the phenotype
    - gp_base supports missing data only cares abouy y and W and g
        The covariance will need to be aligned with gp_base
    - kronecker covariance need to be instructed about row/cols not to considered through Iok label
        -TODO: switch to Kronecker indicator (the soft Kronecker operation needs to be Cythoned)

- Variance Decomposition module 
    - add missing data to GP base
    - set Random params and perturb should be feature of the gp? 
    - row covariance can be specified by using low-rank representation
    - add gp2KronSumLR and gp3KronSumLR as possible inference methods 
    - initialization for some models does not work as it relied on the setCovariance matrix (that does not work for combinators)

- we need more combinators (and more struture):
    - parent class combinator (acombinator)
        - check
        - set freezing of covariances (Danilo)
    - make them child too
        - sum
        - 2kronSum, 2kronSumLR, 3kronSumLR

- kronecker at the moment is not a combinator
    - make it a combinator?
    - generalize all covariances such that R is also a covariance?

- jitter is a freeform-specific property
    - 2kronSum, 2kronSumLR, and 3KronSum should have it as well (they should jitter Cn) 
    - or not?

- add diagonal covariance (also in variance decomposition)

- make the rescaling of the covariance in preprocess efficient

- add Hessian to all covariances
    - add hessian test to test_kronecker

- group-based caching system for general gp

- Improve mtSet: 2KronSum, 2KronSumLR, 3KronSumLR
    - finalize the math write-up
    - set predictions up for Cov2KronSum, Cov2KronSumLR, Cov3KronSum

- PRINT method for all classes (Danilo)

- MeanKronSum:
    - clean it up
    - check caching
        (pheno_has_changed and designs_have_changed for mean base)
    - implement Bste

- Logging system (Danilo)

- Phenotype outside of mean
    (think more...)

************************************************
Discuss with DANILO
***********************************************
- cache disabling does not work
- I modified a minor thing in the caching to discuss
    (commit: bd50719)

****************************************************
OTHER TODOs
****************************************************
- website with forum

- montecarlo sampling for trace
    - interface MC options
        (number of Montecarlo seed, regenerate Z, reuse starting point, etc)

- check the math for general GP base
    - pseudo inverse of X -> Xp*y 
        (sounds like a very good idea)

- we need more combinators (and more struture):
    - child classes:
        - prod
        - 3kronSum

- need methods for new gp inference: 
    - solve_ls method in covariance
    - need Kx or K_dot method (linear operator)
    - sample_trace method???

- MeanKronSum:
    - change covariates such that F and A are not list but long matrices
        (all rotations on F and A are much faster and no need for for-loop)

- Improve mtSet: 2KronSum, 2KronSumLR, 3KronSumLR
    - speed up using tensorization of gradient operations 
    - generalization of 3KronSumLR to have a fixed effect
    - remove splitter_bed (use splitter instead) and debug it

- fix notation with PEP8 or whatever...

Make this consistent throughout:
    - all things that might change either are set in init or method check=True/False
    - __init__(lots of stuff):
        self._assert dimenstion()
        set stuff (with check=False)
    - you can set all the stuff you want

GPs:
    - gp with 1 kron
    - GP2KronSumLR inherits from GPKron (the same manner GP3KronSumLR inherits from GP2KronSum)
    - GP multi kron sum with missing value handling
        (should handle lowrank-ness and so on so forth)


Cov2KronSum:
    - I wrote this not that I do not fully understand anymore:
        we do not need all those methods (e.g., LcGradCgLc, LcGradCnLc) but can squeeze stuff in Ctilde (see GP2KronSumLR)

Cov2KronSumLR:
    - generalize lowrank-rank1 to any covariance-type
        (should be updated in Cov2KronSumLR::Estar)
    - for now supports only 1 Kroneckered fixed effect term
        (with a generalization to multiple terms the FF term breaks apart)
    - also Cg -> Cr in 2kronSumLR

Covariances:
    - introduce Gower rescaling method

NAMING INCONSISTENCIES
    - W makes the dimensionality in all cases
        W is also the design matrix of fixed effects though!
    - for consistency in gp2kronSumLR: row_cov -> G
    - 3kronSumLR and 2kronSumLR are not consistent
        - in the first (W.T * y) does the dimensionality reduction
        - in the second (W * y) does the dimensionality reduction
    - cov2KronSumLR: make notation consistent with other gps R -> GG (also in gp2KronSumLR)

------------------------------------ INFO ----------------------------------------------
TO DISABLE THE CASH:
    env LIMIX_DEBUG=1 python test_cov2kronSum.py

ALL UNITESTES:
    python -m unittest discover .

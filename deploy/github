#!/bin/bash

vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

if [[ $# -ne 1 ]]; then
    echo -n "Wrong number of arguments. You must supply Limix version "
    echo "as the first argument."
    exit 1
fi
LIMIX_VERSION=$1
TAG=v${LIMIX_VERSION}

export REMOTE_REPOSITORY="ssh://git@github.com/PMBio/limix.git"
export REMOTE_BRANCH="refs/heads/production"

function fetch_versions {

    local msg=`github-release info -u PMBio -r limix`
    local level=0
    TAG_VERSIONS=
    RELEASE_VERSIONS=
    local IFS=$'\n'
    for line in $msg; do
        if [ $level -eq 2 ]; then
            version=`echo $line | sed -E 's/^.*v([0-9]+\.[0-9]+\.[0-9]+),.*$/\1/'`
            if [[ ! -z $version ]]; then
                echo $version
                RELEASE_VERSIONS+=$version
                RELEASE_VERSIONS+=' '
            fi
        fi
        if [ "releases:" == "$line" ]; then
            ((level=level+1))
        fi
        if [ $level -eq 1 ]; then
            version=`echo $line | sed -E 's/^.*v([0-9]+\.[0-9]+\.[0-9]+) .*$/\1/'`
            if [[ ! -z $version ]]; then
                echo $version
                TAG_VERSIONS+=$version
                TAG_VERSIONS+=' '
            fi
        fi
        if [ "git tags:" == "$line" ]; then
            ((level=level+1))
        fi
    done
    if [ $level -ne 2 ]; then
        echo "Some error has occurred while fetching tag and realease versions from GitHub."
        exit 1
    fi
}
echo "Fetching TAG and RELEASE Limix versions from GitHub."
fetch_versions

function gt_all {
    local IFS=' '
    local ver="$1"
    local vers="$2"
    for v in $vers
    do
        vercomp $ver $v
        case $? in
            0) op='=';;
            1) op='>';;
            2) op='<';;
        esac
        if [ $op == '<' ]; then
            return 0
        fi
        if [ $op == '=' ]; then
            return 0
        fi
    done
    return 1
}

function neg_ver_msg {
    msg="I won't deploy because the submitted version ${LIMIX_VERSION} is not"
    msg+=" greater than all other $1 versions found in the PMBio repository."
}

gt_all $LIMIX_VERSION $TAG_VERSIONS
if [ $? -ne 1 ]; then
    neg_ver_msg "TAG"
    echo $msg
    exit 0
fi

gt_all $LIMIX_VERSION $RELEASE_VERSIONS
if [ $? -ne 1 ]; then
    neg_ver_msg "RELEASE"
    echo $msg
    exit 0
fi

echo "Retrieving last commit message from branch ${CI_BRANCH}."
COMMIT_MESSAGE=`git log -1 --pretty=%B ${CI_BRANCH} | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | grep -v '^$'`

CI_COMMIT_ID="887c2476402e802269e26169d068ee4eca1b9e69"
CI_COMMITTER_EMAIL="danilo.horta@gmail.com"
CI_COMMITTER_NAME="Danilo Horta"
if [[ ! -z $CI_COMMIT_ID ]]; then
    echo "Deploying Limix ${LIMIX_VERSION} to GitHub."
    mkdir -p "$HOME/.ssh"
    ssh-keyscan -t rsa github.com > ~/.ssh/known_hosts
    echo -e $PRIVATE_SSH_KEY >> $HOME/.ssh/id_rsa
    chmod -R 700 $HOME/.ssh
    git config user.email "${CI_COMMITTER_EMAIL}"
    git config user.name "${CI_COMMITTER_NAME}"
    echo "Ponto 1"
    # printenv
    git fetch || true
    echo "Ponto 2"
    git tag -a ${TAG} ${CI_COMMIT_ID} -m "Automatically generated tag for Limix version ${LIMIX_VERSION}"
    echo "Ponto 3"
    git push --tags ${REMOTE_REPOSITORY} ${CI_COMMIT_ID}:${REMOTE_BRANCH}
    github-release release \
        --user PMBio \
        --repo limix \
        --tag ${TAG} \
        --name "Limix ${LIMIX_VERSION}" \
        --description "This is an automatically generated build triggered by a commit with the following message: ${COMMIT_MESSAGE}"
    echo "Ponto 5"
else
    echo "We won't try to deploy it because CI_COMMIT_ID is missing."
    exit 1
fi

# vercomp 2.5.7 2.5.6
# case $? in
#     0) op='=';;
#     1) op='>';;
#     2) op='<';;
# esac
# echo $op
